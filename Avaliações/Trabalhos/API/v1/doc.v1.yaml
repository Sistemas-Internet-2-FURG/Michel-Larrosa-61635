openapi: 3.0.3
info:
  title: API DE TRABALHO PYTHON FLASK
  description: |-

    ---

    TAREFA DE SISTEMAS PARA INTERNET

    _Projeto iniciado no Primeiro semestre de 2024_
    [github](https://github.com/Sistemas-Internet-2-FURG/Michel-Larrosa-61635/tree/main/Avalia%C3%A7%C3%B5es/Trabalhos).

    Requisitos `API/Banco de Dados` :
    - requisições CRUD
    - relação de chave estrangeira no DB

    ---

  termsOfService: http://localhost:8080/api/v1/terms
  contact:
    email: michel@localhost
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11

externalDocs:
  description: Documentação da API
  url: http://localhost:8080/api/v1/docs
servers:
  - url: http://localhost:8080/api/v1
tags:
  - name: aluno
    description: Todo sobre Aluno, criação , atualização e exclusão
    externalDocs:
      description: sem documentos exclusivos
      url: https://localhost
  - name: alunos
    description: Acesso ao conteúdo de Alunos, individual ou ~~coletivo~~ coleção
    externalDocs:
      description: sem documentos exclusivos
      url: https://localhost
  - name: turma
    description: Acesso ao gerenciamento Aluno-Turma
    externalDocs:
      description: sem documentos exclusivos
      url: https://localhost
  - name: equipe
    description: Access ao gerenciamento da Equipe
    externalDocs:
      description: sem documentos exclusivos
      url:  https://localhost
paths:
  /aluno:
    post:
      tags:
        - aluno
      summary: Add a new aluno to the turma
      description: Add a new aluno to the turma
      operationId: addAluno
      requestBody:
        description: Create a new aluno in the turma
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Aluno'
          application/xml:
            schema:
              $ref: '#/components/schemas/Aluno'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Aluno'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Aluno'
            application/xml:
              schema:
                $ref: '#/components/schemas/Aluno'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
      security:
        - alunoturma_auth:
            - write:alunos
            - read:alunos
    put:
      tags:
        - aluno
      summary: Update an existing Aluno - Full Update
      description: Update an existing aluno by Id but with all data
      operationId: updateAluno
      requestBody:
        description: Update an existent aluno in the turma
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Aluno'
          application/xml:
            schema:
              $ref: '#/components/schemas/Aluno'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Aluno'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Aluno'
            application/xml:
              schema:
                $ref: '#/components/schemas/Aluno'
        '400':
          description: Invalid ID supplied
        '404':
          description: Aluno not found
        '422':
          description: Validation exception
      security:
        - alunoturma_auth:
            - write:alunos
            - read:alunos
    patch:
      tags:
        - aluno
      summary: Update an existing aluno - Partial Update
      description: Update an existing aluno by Id
      operationId: updateAluno
      requestBody:
        description: Update an existent aluno in the turma
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Aluno'
          application/xml:
            schema:
              $ref: '#/components/schemas/Aluno'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Aluno'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Aluno'
            application/xml:
              schema:
                $ref: '#/components/schemas/Aluno'
        '400':
          description: Invalid ID supplied
        '404':
          description: Aluno not found
        '422':
          description: Validation exception
      security:
        - alunoturma_auth:
            - write:alunos
            - read:alunos
    delete:
      tags:
        - aluno
      summary: Deletes an existing aluno
      description: delete a aluno
      operationId: deleteAluno
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: alunoId
          in: query
          description: Aluno id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid aluno value
      security:
        - alunoturma_auth:
            - write:alunos
            - read:alunos


  /alunos/{alunoId}:
    get:
      tags:
        - alunos
      summary: Find Aluno by ID in
      description: Returns a single Aluno
      operationId: getAlunoById
      parameters:
        - name: alunoId
          in: path
          description: ID of aluno to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Aluno'
            application/xml:
              schema:
                $ref: '#/components/schemas/Aluno'
        '204':
            description: Invalid ID supplied. No Content
        '404':
          description: Aluno not found
      security:
        - api_key: []
        - alunoturma_auth:
            - write:alunos
            - read:alunos
  /alunos/:
    get:
      tags:
        - alunos
      summary: Find a limited number of Aluno in Alunos
      description: Returns a colection of Alunos
      operationId: getAluno
      responses:
        '200':
          description: Requisição bem-sucedida. Os dados são retornados
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Aluno'
            application/xml:
              schema:
                $ref: '#/components/schemas/Aluno'
        '204':
          description: No Content
        '404':
          description: Aluno not found
      security:
        - api_key: []
        - alunoturma_auth:
            - write:alunos
            - read:alunos

  /turma/inventory:
    get:
      tags:
        - turma
      summary: Returns aluno inventories by status
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32
      security:
        - api_key: []
  /turma/order:
    post:
      tags:
        - turma
      summary: Place an order for a aluno
      description: Place a new order in the turma
      operationId: placeOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Order'
          application/xml:
            schema:
              $ref: '#/components/schemas/Order'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Order'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /turma/order/{orderId}:
    get:
      tags:
        - turma
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - turma
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /equipe:
    post:
      tags:
        - equipe
      summary: Create equipe
      description: This can only be done by the logged in equipe.
      operationId: createUser
      requestBody:
        description: Created equipe object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /equipe/createWithList:
    post:
      tags:
        - equipe
      summary: Creates list of equipes with given input array
      description: Creates list of equipes with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /equipe/login:
    get:
      tags:
        - equipe
      summary: Logs equipe into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: equipename
          in: query
          description: The equipe name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the equipe
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid equipename/password supplied
  /equipe/logout:
    get:
      tags:
        - equipe
      summary: Logs out current logged in equipe session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /equipe/{equipename}:
    get:
      tags:
        - equipe
      summary: Get equipe by equipe name
      description: ''
      operationId: getUserByName
      parameters:
        - name: equipename
          in: path
          description: 'The name that needs to be fetched. Use equipe1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid equipename supplied
        '404':
          description: User not found
    put:
      tags:
        - equipe
      summary: Update equipe
      description: This can only be done by the logged in equipe.
      operationId: updateUser
      parameters:
        - name: equipename
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent equipe in the turma
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - equipe
      summary: Delete equipe
      description: This can only be done by the logged in equipe.
      operationId: deleteUser
      parameters:
        - name: equipename
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid equipename supplied
        '404':
          description: User not found

components:
  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        alunoId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        equipename:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        equipename:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        equipeStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: equipe
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Aluno:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: aluno status in the turma
          enum:
            - available
            - pending
            - sold
      xml:
        name: aluno
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Aluno:
      description: Aluno object that needs to be added to the turma
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Aluno'
        application/xml:
          schema:
            $ref: '#/components/schemas/Aluno'
    UserArray:
      description: List of equipe object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    alunoturma_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://alunoturma3.swagger.io/oauth/authorize
          scopes:
            write:alunos: modify alunos in your account
            read:alunos: read your alunos
    api_key:
      type: apiKey
      name: api_key
      in: header
